name: CI

on: [push]

concurrency:
  # For pull requests, cancel all currently-running jobs for this workflow
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  # Force terminal colors. @see https://www.npmjs.com/package/colors
  FORCE_COLOR: 1

jobs:
  static_analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache bin/phpcs-bin content
        uses: actions/cache@v4
        id: cache-bin-php-composer
        with:
          path: |
            bin/phpcs-bin/vendor
            bin/phpcs-bin/composer.lock
          key: composer-${{ hashFiles('bin/phpcs-bin/composer.json') }}

      - name: Install bin/phpcs-bin Composer dependencies
        if: steps.cache-bin-php-composer.outputs.cache-hit != 'true'
        run: |
          chmod +x ./bin/phpcs-bin/install
          ./bin/phpcs-bin/install

      - name: PHPCS
        run: |
          chmod +x ./bin/phpcs
          ./bin/phpcs -q
      
      - name: Run the setup
        env:
          M2_COMPOSER_REPO_KEY: ${{ secrets.M2_COMPOSER_REPO_KEY }}
          M2_COMPOSER_REPO_SECRET: ${{ secrets.M2_COMPOSER_REPO_SECRET }}
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp .env.sample .env
          sed -i "s/^M2_SAMPLE_DATA=.*/#M2_SAMPLE_DATA=&/" .env
          sed -i "s/^M2_COMPOSER_REPO_KEY=.*/M2_COMPOSER_REPO_KEY=$M2_COMPOSER_REPO_KEY/" .env
          sed -i "s/^M2_COMPOSER_REPO_SECRET=.*/M2_COMPOSER_REPO_SECRET=$M2_COMPOSER_REPO_SECRET/" .env
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u sequra --password-stdin || (echo "‚ùå Can't log in to the GitHub Container Registry" && exit 1)
          ./setup.sh

      - name: PHPStan
        run: |
          chmod +x ./bin/phpstan
          ./bin/phpstan --error-format=github --no-progress
      
      - name: Teardown Environment
        if: always()
        run: ./teardown.sh